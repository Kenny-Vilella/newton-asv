{
    "compilation.bench_example_load.SlowExampleBasicUrdf.time_load": {
        "code": "class SlowExampleBasicUrdf:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.basic.example_basic_urdf\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()",
        "min_run_count": 2,
        "name": "compilation.bench_example_load.SlowExampleBasicUrdf.time_load",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "5212ba785a2d013b8fc4b4fd1f0281ba23f65a10036f337e6abebdcd1784a35a",
        "warmup_time": 0
    },
    "compilation.bench_example_load.SlowExampleClothFranka.time_load": {
        "code": "class SlowExampleClothFranka:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.cloth.example_cloth_franka\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()",
        "min_run_count": 2,
        "name": "compilation.bench_example_load.SlowExampleClothFranka.time_load",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "9a1d510bf84d0d2d4d3c68dc0b43f672866854e51df5b70071be0cc9a9aa37ee",
        "warmup_time": 0
    },
    "compilation.bench_example_load.SlowExampleClothTwist.time_load": {
        "code": "class SlowExampleClothTwist:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.cloth.example_cloth_twist\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()",
        "min_run_count": 2,
        "name": "compilation.bench_example_load.SlowExampleClothTwist.time_load",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "2944bcd1d41a1d0755a46fab1ccbb2b38418c589a0ebb982702ba9be5bd32471",
        "warmup_time": 0
    },
    "compilation.bench_example_load.SlowExampleRobotAnymal.time_load": {
        "code": "class SlowExampleRobotAnymal:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_anymal_c_walk\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()",
        "min_run_count": 2,
        "name": "compilation.bench_example_load.SlowExampleRobotAnymal.time_load",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "30b4e830fd859608ff412e9052e49492eb804327e44f3cbedf4183876c171021",
        "warmup_time": 0
    },
    "compilation.bench_example_load.SlowExampleRobotCartpole.time_load": {
        "code": "class SlowExampleRobotCartpole:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_cartpole\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()",
        "min_run_count": 2,
        "name": "compilation.bench_example_load.SlowExampleRobotCartpole.time_load",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "71e2c9a9b0957497094f25a0b4dff3546059e17c249880ccff2c5a3dc09debf7",
        "warmup_time": 0
    },
    "compilation.bench_example_load.SlowExampleRobotHumanoid.time_load": {
        "code": "class SlowExampleRobotHumanoid:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_load(self):\n        \"\"\"Time the amount of time it takes to load and run one frame of the example.\"\"\"\n    \n        command = [\n            sys.executable,\n            \"-m\",\n            \"newton.examples.robot.example_robot_humanoid\",\n            \"--num-frames\",\n            \"1\",\n            \"--viewer\",\n            \"null\",\n        ]\n    \n        # Run the script as a subprocess\n        subprocess.run(command, capture_output=True, text=True, check=True)\n\n    def setup(self):\n        wp.build.clear_lto_cache()\n        wp.build.clear_kernel_cache()",
        "min_run_count": 2,
        "name": "compilation.bench_example_load.SlowExampleRobotHumanoid.time_load",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "3d838883c58af639755f7dcfa6d7b6f603f4faefa35577421e70a41be5877518",
        "warmup_time": 0
    },
    "setup.bench_model.FastInitializeModel.peakmem_initialize_model_cpu": {
        "code": "class FastInitializeModel:\n    def peakmem_initialize_model_cpu(self, robot, num_envs):\n        gc.collect()\n    \n        with wp.ScopedDevice(\"cpu\"):\n            builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n            # finalize model\n            model = builder.finalize()\n    \n        del model\n\n    def setup_cache(self):\n        # Load a small model to cache the kernels\n        builder = Example.create_model_builder(\"cartpole\", 1, randomize=False, seed=123)\n        model = builder.finalize(device=\"cpu\")\n        del model",
        "name": "setup.bench_model.FastInitializeModel.peakmem_initialize_model_cpu",
        "param_names": [
            "robot",
            "num_envs"
        ],
        "params": [
            [
                "'humanoid'",
                "'g1'",
                "'h1'",
                "'cartpole'",
                "'ant'",
                "'quadruped'"
            ],
            [
                "128",
                "256"
            ]
        ],
        "setup_cache_key": "setup.bench_model:90",
        "type": "peakmemory",
        "unit": "bytes",
        "version": "00b15a26b4c43ef2248ee8fe62d371f732257fb3137f06c9097d9acea132204d"
    },
    "setup.bench_model.FastInitializeModel.time_initialize_model": {
        "code": "class FastInitializeModel:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_model(self, robot, num_envs):\n        builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n        # finalize model\n        _model = builder.finalize()\n        wp.synchronize_device()\n\n    def setup_cache(self):\n        # Load a small model to cache the kernels\n        builder = Example.create_model_builder(\"cartpole\", 1, randomize=False, seed=123)\n        model = builder.finalize(device=\"cpu\")\n        del model",
        "min_run_count": 1,
        "name": "setup.bench_model.FastInitializeModel.time_initialize_model",
        "number": 1,
        "param_names": [
            "robot",
            "num_envs"
        ],
        "params": [
            [
                "'humanoid'",
                "'g1'",
                "'h1'",
                "'cartpole'",
                "'ant'",
                "'quadruped'"
            ],
            [
                "128",
                "256"
            ]
        ],
        "repeat": 3,
        "rounds": 1,
        "sample_time": 0.01,
        "setup_cache_key": "setup.bench_model:90",
        "type": "time",
        "unit": "seconds",
        "version": "ffaa21a0ae50932fc9968e894d23821a76d4f8f21762bf4f09488a61cd95c4d4",
        "warmup_time": -1
    },
    "setup.bench_model.FastInitializeSolver.time_initialize_solver": {
        "code": "class FastInitializeSolver:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_solver(self, robot, num_envs):\n        self._solver = Example.create_solver(self._model, robot, use_mujoco_cpu=False)\n        wp.synchronize_device()\n\n    def setup(self, robot, num_envs):\n        if robot == \"h1\":\n            # use more samples for H1 to reduce variance\n            self.repeat = 10\n    \n        wp.init()\n        builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()",
        "min_run_count": 1,
        "name": "setup.bench_model.FastInitializeSolver.time_initialize_solver",
        "number": 1,
        "param_names": [
            "robot",
            "num_envs"
        ],
        "params": [
            [
                "'humanoid'",
                "'g1'",
                "'h1'",
                "'cartpole'",
                "'ant'",
                "'quadruped'"
            ],
            [
                "128",
                "256"
            ]
        ],
        "repeat": 3,
        "rounds": 1,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "7def22359352eb6f6e511215c0e10dee89e238c85a36ab410661280834767455",
        "warmup_time": -1
    },
    "setup.bench_model.KpiInitializeModel.time_initialize_model": {
        "code": "class KpiInitializeModel:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_model(self, robot, num_envs):\n        builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n        # finalize model\n        _model = builder.finalize()\n        wp.synchronize_device()\n\n    def setup(self, robot, num_envs):\n        wp.init()",
        "min_run_count": 1,
        "name": "setup.bench_model.KpiInitializeModel.time_initialize_model",
        "number": 1,
        "param_names": [
            "robot",
            "num_envs"
        ],
        "params": [
            [
                "'humanoid'",
                "'g1'",
                "'h1'",
                "'cartpole'",
                "'ant'",
                "'quadruped'"
            ],
            [
                "4096",
                "8192"
            ]
        ],
        "repeat": 3,
        "rounds": 1,
        "sample_time": 0.01,
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "916798ac3c284de170329bf7c2922e5f147d35325fe54719dc7624847692f943",
        "warmup_time": -1
    },
    "setup.bench_model.KpiInitializeSolver.time_initialize_solver": {
        "code": "class KpiInitializeSolver:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_initialize_solver(self, robot, num_envs):\n        self._solver = Example.create_solver(self._model, robot, use_mujoco_cpu=False)\n        wp.synchronize_device()\n\n    def setup(self, robot, num_envs):\n        if robot == \"h1\":\n            # use more samples for H1 to reduce variance\n            self.repeat = 10\n    \n        wp.init()\n        builder = Example.create_model_builder(robot, num_envs, randomize=True, seed=123)\n    \n        # finalize model\n        self._model = builder.finalize()",
        "min_run_count": 1,
        "name": "setup.bench_model.KpiInitializeSolver.time_initialize_solver",
        "number": 1,
        "param_names": [
            "robot",
            "num_envs"
        ],
        "params": [
            [
                "'humanoid'",
                "'g1'",
                "'h1'",
                "'cartpole'",
                "'ant'",
                "'quadruped'"
            ],
            [
                "4096",
                "8192"
            ]
        ],
        "repeat": 3,
        "rounds": 1,
        "sample_time": 0.01,
        "timeout": 3600,
        "type": "time",
        "unit": "seconds",
        "version": "9515c244e90b87bca836bc7af4015e3cf3a9502c8095f1b0a3c5065581835ed2",
        "warmup_time": -1
    },
    "simulation.bench_anymal.FastExampleAnymalPretrained.time_simulate": {
        "code": "class FastExampleAnymalPretrained:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 50\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames))",
        "min_run_count": 2,
        "name": "simulation.bench_anymal.FastExampleAnymalPretrained.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 3,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "29d871d361f5e50619ca9ee4af8ee5f22def523c03a5aa19b0365c23ecb5dd28",
        "warmup_time": -1
    },
    "simulation.bench_cloth.FastExampleClothManipulation.time_simulate": {
        "code": "class FastExampleClothManipulation:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        newton.examples.run(self.example, args=None)\n    \n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 30\n        self.example = ExampleClothManipulation(ViewerNull(num_frames=self.num_frames))",
        "min_run_count": 2,
        "name": "simulation.bench_cloth.FastExampleClothManipulation.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 3,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 300,
        "type": "time",
        "unit": "seconds",
        "version": "b3ceadbc55945ff4c6130a4fbcec6e455edc4e3085dd62f0e02103dbd33101ad",
        "warmup_time": -1
    },
    "simulation.bench_cloth.FastExampleClothTwist.time_simulate": {
        "code": "class FastExampleClothTwist:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        newton.examples.run(self.example, None)\n    \n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 100\n        self.example = ExampleClothTwist(ViewerNull(num_frames=self.num_frames))",
        "min_run_count": 2,
        "name": "simulation.bench_cloth.FastExampleClothTwist.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 5,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "01dfa4b62b6e71ea72ece4c0c2371d26b1ba72a8ef8c94a900d8e40be3907293",
        "warmup_time": -1
    },
    "simulation.bench_mujoco.FastAnt.time_simulate": {
        "code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"None\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()",
        "min_run_count": 2,
        "name": "simulation.bench_mujoco.FastAnt.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 8,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e70d2f4dc12b4fa825173576bf2b38c2ab23843fdaf0ba0e72ff0295379ab7d7",
        "warmup_time": -1
    },
    "simulation.bench_mujoco.FastCartpole.time_simulate": {
        "code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"None\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()",
        "min_run_count": 2,
        "name": "simulation.bench_mujoco.FastCartpole.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 8,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e70d2f4dc12b4fa825173576bf2b38c2ab23843fdaf0ba0e72ff0295379ab7d7",
        "warmup_time": -1
    },
    "simulation.bench_mujoco.FastG1.time_simulate": {
        "code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"None\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()",
        "min_run_count": 2,
        "name": "simulation.bench_mujoco.FastG1.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e70d2f4dc12b4fa825173576bf2b38c2ab23843fdaf0ba0e72ff0295379ab7d7",
        "warmup_time": -1
    },
    "simulation.bench_mujoco.FastH1.time_simulate": {
        "code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"None\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()",
        "min_run_count": 2,
        "name": "simulation.bench_mujoco.FastH1.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 2,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e70d2f4dc12b4fa825173576bf2b38c2ab23843fdaf0ba0e72ff0295379ab7d7",
        "warmup_time": -1
    },
    "simulation.bench_mujoco.FastHumanoid.time_simulate": {
        "code": "class _FastBenchmark:\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            wp.capture_launch(self.graph)\n        wp.synchronize_device()\n\n    def setup(self):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = Example.create_model_builder(self.robot, self.num_envs, randomize=True, seed=123)\n    \n        self.example = Example(\n            stage_path=None,\n            robot=self.robot,\n            randomize=True,\n            headless=True,\n            actuation=\"None\",\n            num_envs=self.num_envs,\n            use_cuda_graph=True,\n            builder=self.builder,\n        )\n    \n        wp.synchronize_device()\n    \n        # Recapture the graph with control application included\n        cuda_graph_comp = wp.get_device().is_cuda and wp.is_mempool_enabled(wp.get_device())\n        if not cuda_graph_comp:\n            raise SkipNotImplemented\n        else:\n            state = wp.rand_init(self.example.seed)\n            with wp.ScopedCapture() as capture:\n                wp.launch(\n                    apply_random_control,\n                    dim=(self.example.model.joint_dof_count,),\n                    inputs=[state],\n                    outputs=[self.example.control.joint_target],\n                )\n                self.example.simulate()\n            self.graph = capture.graph\n    \n        wp.synchronize_device()",
        "min_run_count": 2,
        "name": "simulation.bench_mujoco.FastHumanoid.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 8,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "e70d2f4dc12b4fa825173576bf2b38c2ab23843fdaf0ba0e72ff0295379ab7d7",
        "warmup_time": -1
    },
    "simulation.bench_mujoco.KpiAnt.track_simulate": {
        "code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n                ls_iteration=self.ls_iteration,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)",
        "name": "simulation.bench_mujoco.KpiAnt.track_simulate",
        "param_names": [
            "num_envs"
        ],
        "params": [
            [
                "4096",
                "8192",
                "16384"
            ]
        ],
        "type": "track",
        "unit": "ms/env-step",
        "version": "24e7238abd9bbf98e75fdbe644399d3354efaf7ce3791621a21fb8a0f059ed90"
    },
    "simulation.bench_mujoco.KpiCartpole.track_simulate": {
        "code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n                ls_iteration=self.ls_iteration,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)",
        "name": "simulation.bench_mujoco.KpiCartpole.track_simulate",
        "param_names": [
            "num_envs"
        ],
        "params": [
            [
                "4096",
                "8192"
            ]
        ],
        "type": "track",
        "unit": "ms/env-step",
        "version": "24e7238abd9bbf98e75fdbe644399d3354efaf7ce3791621a21fb8a0f059ed90"
    },
    "simulation.bench_mujoco.KpiG1.track_simulate": {
        "code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n                ls_iteration=self.ls_iteration,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)",
        "name": "simulation.bench_mujoco.KpiG1.track_simulate",
        "param_names": [
            "num_envs"
        ],
        "params": [
            [
                "4096",
                "8192"
            ]
        ],
        "timeout": 900,
        "type": "track",
        "unit": "ms/env-step",
        "version": "24e7238abd9bbf98e75fdbe644399d3354efaf7ce3791621a21fb8a0f059ed90"
    },
    "simulation.bench_mujoco.KpiH1.track_simulate": {
        "code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n                ls_iteration=self.ls_iteration,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)",
        "name": "simulation.bench_mujoco.KpiH1.track_simulate",
        "param_names": [
            "num_envs"
        ],
        "params": [
            [
                "4096",
                "8192"
            ]
        ],
        "timeout": 900,
        "type": "track",
        "unit": "ms/env-step",
        "version": "24e7238abd9bbf98e75fdbe644399d3354efaf7ce3791621a21fb8a0f059ed90"
    },
    "simulation.bench_mujoco.KpiHumanoid.track_simulate": {
        "code": "class _KpiBenchmark:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def track_simulate(self, num_envs):\n        total_time = 0.0\n        for _iter in range(self.samples):\n            example = Example(\n                stage_path=None,\n                robot=self.robot,\n                randomize=True,\n                headless=True,\n                actuation=\"random\",\n                num_envs=num_envs,\n                use_cuda_graph=True,\n                builder=self.builder[num_envs],\n                ls_iteration=self.ls_iteration,\n            )\n    \n            wp.synchronize_device()\n            for _ in range(self.num_frames):\n                example.step()\n            wp.synchronize_device()\n            total_time += example.benchmark_time\n    \n        return total_time * 1000 / (self.num_frames * example.sim_substeps * num_envs * self.samples)\n\n    def setup(self, num_envs):\n        if not hasattr(self, \"builder\") or self.builder is None:\n            self.builder = {}\n        if num_envs not in self.builder:\n            self.builder[num_envs] = Example.create_model_builder(self.robot, num_envs, randomize=True, seed=123)",
        "name": "simulation.bench_mujoco.KpiHumanoid.track_simulate",
        "param_names": [
            "num_envs"
        ],
        "params": [
            [
                "4096",
                "8192"
            ]
        ],
        "type": "track",
        "unit": "ms/env-step",
        "version": "24e7238abd9bbf98e75fdbe644399d3354efaf7ce3791621a21fb8a0f059ed90"
    },
    "simulation.bench_quadruped_xpbd.FastExampleQuadrupedXPBD.time_simulate": {
        "code": "class FastExampleQuadrupedXPBD:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 1000\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames), num_envs=200)",
        "min_run_count": 2,
        "name": "simulation.bench_quadruped_xpbd.FastExampleQuadrupedXPBD.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 10,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "3ba5e67e6f32e36e4ffbdb35ec8f63b31e8c6be3845f7dfea1b5f689a5d17a9a",
        "warmup_time": -1
    },
    "simulation.bench_selection.FastExampleSelectionCartpoleMuJoCo.time_simulate": {
        "code": "class FastExampleSelectionCartpoleMuJoCo:\n    @skip_benchmark_if(wp.get_cuda_device_count() == 0)\n    def time_simulate(self):\n        for _ in range(self.num_frames):\n            self.example.step()\n        wp.synchronize_device()\n\n    def setup(self):\n        self.num_frames = 200\n        self.example = Example(viewer=newton.viewer.ViewerNull(num_frames=self.num_frames), num_envs=16, verbose=False)",
        "min_run_count": 2,
        "name": "simulation.bench_selection.FastExampleSelectionCartpoleMuJoCo.time_simulate",
        "number": 1,
        "param_names": [],
        "params": [],
        "repeat": 10,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "217a8c3af2d5684c13e158f125e31b36d1d2979162485f3aa55f1c331e55cb40",
        "warmup_time": -1
    },
    "version": 2
}